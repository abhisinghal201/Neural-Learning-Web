
CREATE TABLE user_profile (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT NOT NULL DEFAULT 'Neural Explorer',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    timezone TEXT DEFAULT 'UTC',
    preferred_session_length INTEGER DEFAULT 25, -- Pomodoro minutes
    daily_goal_minutes INTEGER DEFAULT 60,
    current_phase INTEGER DEFAULT 1,
    current_week INTEGER DEFAULT 1,
    total_study_minutes INTEGER DEFAULT 0,
    current_streak_days INTEGER DEFAULT 0,
    longest_streak_days INTEGER DEFAULT 0,
    last_activity_date DATE,
    avatar_style TEXT DEFAULT 'neural_network',
    theme_preference TEXT DEFAULT 'dark'
);

-- Learning Progress Tracking
CREATE TABLE learning_progress (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    phase INTEGER NOT NULL, -- 1-4 (foundations, core-ml, advanced, mastery)
    week INTEGER NOT NULL,  -- 1-48 total weeks
    lesson_id TEXT NOT NULL, -- e.g., 'linear_algebra_eigenvalues'
    lesson_title TEXT NOT NULL,
    status TEXT CHECK(status IN ('not_started', 'in_progress', 'completed', 'mastered')) DEFAULT 'not_started',
    completion_percentage INTEGER DEFAULT 0,
    time_spent_minutes INTEGER DEFAULT 0,
    completed_at DATETIME,
    mastery_score REAL, -- 0.0 to 1.0
    notes TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(phase, week, lesson_id)
);

-- Vault Items Unlock Tracking
CREATE TABLE vault_unlocks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    vault_item_id TEXT NOT NULL, -- matches vault-items.json IDs
    category TEXT CHECK(category IN ('secret_archives', 'controversy_files', 'beautiful_mind')) NOT NULL,
    unlocked_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    is_read BOOLEAN DEFAULT FALSE,
    read_at DATETIME,
    user_rating INTEGER CHECK(user_rating BETWEEN 1 AND 5),
    user_notes TEXT,
    UNIQUE(vault_item_id)
);

-- Daily Learning Sessions
CREATE TABLE daily_sessions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    session_date DATE NOT NULL,
    session_type TEXT CHECK(session_type IN ('math', 'coding', 'visual_projects', 'real_applications')) NOT NULL,
    start_time DATETIME NOT NULL,
    end_time DATETIME,
    duration_minutes INTEGER,
    focus_score INTEGER CHECK(focus_score BETWEEN 1 AND 10), -- self-reported focus level
    energy_level INTEGER CHECK(energy_level BETWEEN 1 AND 10), -- self-reported energy
    completed_goals TEXT, -- JSON array of completed daily goals
    session_notes TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Quest and Project Completions
CREATE TABLE quest_completions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    quest_id TEXT NOT NULL,
    quest_title TEXT NOT NULL,
    quest_type TEXT CHECK(quest_type IN ('coding_exercise', 'implementation_project', 'theory_quiz', 'practical_application')) NOT NULL,
    phase INTEGER NOT NULL,
    week INTEGER NOT NULL,
    difficulty_level INTEGER CHECK(difficulty_level BETWEEN 1 AND 5) NOT NULL,
    status TEXT CHECK(status IN ('attempted', 'completed', 'mastered')) DEFAULT 'attempted',
    code_solution TEXT, -- stores user's code solutions
    execution_result TEXT, -- stores code execution output
    time_to_complete_minutes INTEGER,
    attempts_count INTEGER DEFAULT 1,
    hint_used_count INTEGER DEFAULT 0,
    completed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    mentor_feedback TEXT, -- AI-generated feedback
    self_reflection TEXT -- user's own reflection on the quest
);

-- Skill Points and Achievements
CREATE TABLE skill_points (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    category TEXT CHECK(category IN ('mathematics', 'programming', 'theory', 'applications', 'creativity', 'persistence')) NOT NULL,
    points_earned INTEGER NOT NULL,
    reason TEXT NOT NULL, -- what earned these points
    earned_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    related_quest_id TEXT,
    related_lesson_id TEXT
);

-- Knowledge Graph Connections (tracks user's conceptual understanding)
CREATE TABLE knowledge_connections (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    concept_a TEXT NOT NULL,
    concept_b TEXT NOT NULL,
    connection_type TEXT CHECK(connection_type IN ('builds_on', 'applies_to', 'similar_to', 'contrasts_with', 'enables')) NOT NULL,
    strength REAL CHECK(strength BETWEEN 0.0 AND 1.0) DEFAULT 0.5, -- how well user understands the connection
    discovered_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    last_reinforced_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    user_explanation TEXT, -- user's explanation of the connection
    UNIQUE(concept_a, concept_b, connection_type)
);

-- Learning Analytics and Insights
CREATE TABLE learning_analytics (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    metric_name TEXT NOT NULL,
    metric_value REAL NOT NULL,
    measurement_date DATE NOT NULL,
    category TEXT, -- e.g., 'focus', 'retention', 'speed', 'consistency'
    notes TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Spaced Repetition Schedule
CREATE TABLE spaced_repetition (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    concept_id TEXT NOT NULL,
    concept_title TEXT NOT NULL,
    difficulty_factor REAL DEFAULT 2.5, -- SM-2 algorithm
    interval_days INTEGER DEFAULT 1,
    repetition_count INTEGER DEFAULT 0,
    next_review_date DATE NOT NULL,
    last_reviewed_at DATETIME,
    quality_score INTEGER CHECK(quality_score BETWEEN 0 AND 5), -- last review quality
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(concept_id)
);

-- Backup and Recovery Metadata
CREATE TABLE backup_metadata (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    backup_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    backup_type TEXT CHECK(backup_type IN ('daily', 'weekly', 'manual')) NOT NULL,
    file_path TEXT NOT NULL,
    file_size_bytes INTEGER,
    checksum TEXT,
    restoration_tested BOOLEAN DEFAULT FALSE
);

-- Insert default user profile
INSERT INTO user_profile (username) VALUES ('Neural Explorer');

-- Create indexes for performance
CREATE INDEX idx_learning_progress_phase_week ON learning_progress(phase, week);
CREATE INDEX idx_learning_progress_status ON learning_progress(status);
CREATE INDEX idx_vault_unlocks_category ON vault_unlocks(category);
CREATE INDEX idx_daily_sessions_date ON daily_sessions(session_date);
CREATE INDEX idx_quest_completions_phase_week ON quest_completions(phase, week);
CREATE INDEX idx_spaced_repetition_next_review ON spaced_repetition(next_review_date);
CREATE INDEX idx_knowledge_connections_concepts ON knowledge_connections(concept_a, concept_b);

-- Create triggers for automatic timestamp updates
CREATE TRIGGER update_learning_progress_timestamp 
    AFTER UPDATE ON learning_progress
    BEGIN
        UPDATE learning_progress SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
    END;

-- Create view for current progress summary
CREATE VIEW current_progress_summary AS
SELECT 
    up.current_phase,
    up.current_week,
    up.current_streak_days,
    up.total_study_minutes,
    COUNT(CASE WHEN lp.status = 'completed' THEN 1 END) as completed_lessons,
    COUNT(CASE WHEN lp.status = 'mastered' THEN 1 END) as mastered_lessons,
    COUNT(vu.id) as unlocked_vault_items,
    AVG(ds.focus_score) as avg_focus_score
FROM user_profile up
LEFT JOIN learning_progress lp ON 1=1
LEFT JOIN vault_unlocks vu ON 1=1  
LEFT JOIN daily_sessions ds ON ds.session_date >= date('now', '-7 days')
WHERE up.id = 1;

-- Create view for next items to review (spaced repetition)
CREATE VIEW next_reviews AS
SELECT 
    concept_id,
    concept_title,
    next_review_date,
    repetition_count,
    difficulty_factor
FROM spaced_repetition 
WHERE next_review_date <= date('now')
ORDER BY next_review_date ASC, repetition_count ASC
LIMIT 10;